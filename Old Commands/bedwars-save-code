module.exports = {
    name: "bedwars",
    category: "minecraft",
    description: "Gets players information about bedwars stats",
    run: async (client, message, args) => {
        console.log("Works");

                
        const humanizeDuration = require('humanize-duration');
        const hypixel = require("hypixel-api-nodejs");

        // Cooldowns
        const cooldowns = {
            "hypixel": {
                "main": new Map(),
                "pit": new Map()
            }
        };
        
                
        const embedHelper = { 
            footer: {
                text: 'Xeno Bot',                                           
                image: {
                    'green': 'https://cdn.discordapp.com/emojis/722990201307398204.png?v=1',
                    'red':   'https://cdn.discordapp.com/emojis/722990201302941756.png?v=1'
                }
            } 
        };
        
        function sendErrorEmbed(channel, error, description) {
            const exampleEmbed = new Discord.MessageEmbed()
                .setColor('#F64B4B')
                .setTitle(`Oops!`)
                .addField(`${error}`, `${description}`)
                .setThumbnail('https://hypixel.monster/assets/images/hypixel.png')              
                .setTimestamp()
                .setFooter(embedHelper.footer.text, embedHelper.footer.image.red)
            return channel.send(exampleEmbed);
        }
        
        function minecraftColorToHex(colorname) {
            switch(colorname) {
                case "BLACK":
                    return "#000000";
                case "DARK_BLUE":
                    return "#0100BD";
                case "DARK_GREEN":
                    return "#00BF00";
                case "DARK_AQUA":
                    return "#00BDBD";
                case "DARK_RED":
                    return "#BE0000";
                case "DARK_PURPLE":
                    return "#BC01BC";
                case "GOLD":
                    return "#DB9F37";
                case "GRAY":
                    return "#BEBDBE";
                case "DARK_GRAY":
                    return "#3F3F3F";
                case "BLUE":
                    return "#3F3FFE";
                case "GREEN":
                    return "#3FFE3E";
                case "AQUA":
                    return "#40FCFF";
                case "RED":
                    return "#FF3E3F";
                case "LIGHT_PURPLE":
                    return "#FE3FFE";
                case "YELLOW":
                    return "#FEFD3F";
                case "WHITE":
                    return "#FFFFFF";
            }
        }
        
        String.prototype.toCleanGameType = function() {
            switch(this.toString()) {
                case "BEDWARS": 
                    return "BedWars";
                case "QUAKECRAFT":
                    return "Quake";
                case "WALLS":
                    return "Walls";
                case "PAINTBALL":
                    return "Paintball";
                case "SURVIVAL_GAMES":
                    return "Blitz Survival Games";
                case "TNTGAMES":
                    return "TNT Games";
                case "VAMPIREZ":
                    return "VampireZ";
                case "WALLS3":
                    return "Mega Walls";
                case "ARCADE":
                    return "Arcade";
                case "ARENA":
                    return "Arena";
                case "UHC":
                    return "UHC Champions";
                case "MCGO":
                    return "Cops and Crims";
                case "BATTLEGROUND":
                    return "Warlords";
                case "SUPER_SMASH":
                    return "Smash Heroes";
                case "GINGERBREAD":
                    return "Turbo Kart Racers";
                case "HOUSING":
                    return "Housing";
                case "SKYWARS":
                    return "SkyWars";
                case "TRUE_COMBAT":
                    return "Crazy Walls";
                case "SPEED_UHC":
                    return "Speed UHC";
                case "SKYCLASH":
                    return "SkyClash";
                case "LEGACY":
                    return "Classic Games";
                case "PROTOTYPE":
                    return "Prototype";
                case "MURDER_MYSTERY":
                    return "Murder Mystery";
                case "BUILD_BATTLE":
                    return "Build Battle";
                case "DUELS":
                    return "Duels";
                case "SKYBLOCK":
                    return "SkyBlock";
                case "PIT":
                    return "Pit";
                default:
                    return "None";
            }
        }
        
        var ObjectforEach = function (collection, callback, scope) {
            if (Object.prototype.toString.call(collection) === '[object Object]') {
            for (var prop in collection) {
                if (Object.prototype.hasOwnProperty.call(collection, prop)) {
                callback.call(scope, collection[prop], prop, collection);
                }
            }
            } else {
            for (var i = 0, len = collection.length; i < len; i++) {
                callback.call(scope, collection[i], i, collection);
            }
            }
        };
        
        String.prototype.capitalizeFirst = function() {
            return this.toString().charAt(0).toUpperCase() + this.toString().slice(1).toLowerCase();
        }
        String.prototype.toTimeString = function() {
            let num = this.toString();
            if(num < 60) return `${num}m`;
            let hours = (num / 60);
            let rhours = Math.floor(hours);
            let minutes = (hours - rhours) * 60;
            let rminutes = Math.round(minutes);
            return `${rhours}h ${rminutes}m`;
        }
        
        function pad(n){return n<10 ? '0'+n : n}

        client.on('message', m => {
            if(m.author.bot) return;
            const args = m.content.slice(prefix.length).split(' ');
            const command = args.shift().toLowerCase();

        let key = `65151b83-c5ee-49b5-98f2-cc9a17b03d62`;
                
        let cooldownT = 30 * 1000, cooldownG = cooldowns.hypixel.pit.get(m.author.id);
            if(cooldownG) return m.channel.send(`Please wait ${humanizeDuration(cooldownG - Date.now(), { round: true })} before running ${command} again`);
    
    
            if(!args[0])  return sendErrorEmbed(m.channel, `Usage`, `${prefix}${command} <user>`);
            let tinodata = { "rank": {}, "user": {}, "pit": {} };
            hypixel.getPlayerByName(key, args[0]).then(user => {
                if(!user.success || user.success == false || user.player == null || user.player == undefined || !user.player) return sendErrorEmbed(m.channel, `Unknown Player`, `Player has no data in Hypixel's Database`);
                    switch(user.player.newPackageRank) {
                        case "MVP_PLUS":
                            tinodata.rank.displayName = "[MVP+]";
                            tinodata.rank.name = "MVP+";
                            tinodata.rank.color = minecraftColorToHex("AQUA");
                            break;
                        case "MVP":
                            tinodata.rank.displayName = "[MVP]";
                            tinodata.rank.name = "MVP";
                            tinodata.rank.color = minecraftColorToHex("AQUA");
                            break;
                        case "VIP_PLUS":
                            tinodata.rank.displayName = "[VIP+]";
                            tinodata.rank.name = "VIP+";
                            tinodata.rank.color = minecraftColorToHex("GREEN");
                            break;
                        case "VIP":
                            tinodata.rank.displayName = "[VIP]";
                            tinodata.rank.name = "VIP";
                            tinodata.rank.color = minecraftColorToHex("GREEN");
                            break;
                        default:
                            tinodata.rank.displayName = "";
                            tinodata.rank.name = "None";
                            tinodata.rank.color = minecraftColorToHex("GRAY");
                    }
                    if(user.player.monthlyPackageRank == "SUPERSTAR") {
                        tinodata.rank.displayName = "[MVP++]";
                        tinodata.rank.name = "MVP++";
                        tinodata.rank.color = minecraftColorToHex("GOLD");
                    }
                    if(user.player.rankPlusColor) tinodata.rank.color = minecraftColorToHex(user.player.rankPlusColor);
    
                    const embed = new Discord.MessageEmbed()
                        .setColor(`${tinodata.rank.color}`)
                        .setAuthor(`${m.author.tag}`, `https://cdn.discordapp.com/avatars/${m.author.id}/${m.author.avatar}?size=128`)
                        .setTitle(`${tinodata.rank.displayName} ${user.player.displayname}`)
                        .setURL(`https://namemc.com/search?q=${user.player.displayname}`)
                        .setThumbnail(`https://visage.surgeplay.com/head/128/{user.player.uuid}`)
                        .setImage(`https://visage.surgeplay.com/full/512/${user.player.uuid}`)
                        .setTimestamp()
                        .setFooter("Xeno Bot", embedHelper.footer.image.green)
                        if(!user.player.stats.Bedwars) {
                            embed.setDescription(`**Bedwars**\nCould not retrieve **Bedwars** Stats for this user, maybe he/she never joined a Bedwars game!`);
                            return m.channel.send(embed);
                        }
                        embed.addFields(
                            {name: `**Games Played**`, value: `${user.player.stats.Bedwars.games_played_bedwars_1}`, inline: true},
                            {name: `**Wins**`, value: `${user.player.stats.Bedwars.wins_bedwars}`, inline: true},
                            {name: `**Kills**`, value: `${user.player.stats.Bedwars.kills_bedwars}`, inline: true},
                            {name: `**Final Kills**`, value: `${user.player.stats.Bedwars.final_kills_bedwars}`, inline: true},
                            {name: `**Games Lost**`, value: `${user.player.stats.Bedwars.losses_bedwars}`, inline: true},
                            {name: `**Deaths**`, value: `${user.player.stats.Bedwars.deaths_bedwars}`, inline: true},
                            {name: `**Beds Broken**`, value: `${user.player.stats.Bedwars.beds_broken_bedwars}`, inline: true},
                            {name: `**Beds Lost**`, value: `${user.player.stats.Bedwars.beds_lost_bedwars}`, inline: true},
                            {name: `**Coins**`, value: `${user.player.stats.Bedwars.coins}`, inline: true}
                        )
    
                        cooldowns.hypixel.pit.set(m.author.id, Date.now() + cooldownT);
                        setTimeout(() => cooldowns.hypixel.pit.delete(m.author.id), cooldownT);
                        return m.channel.send(embed);
                    });
                })
    }

    

}