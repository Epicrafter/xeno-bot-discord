#!/usr/bin/env node

const ora = require('ora')
const chalk = require("chalk");

const danger = chalk.keyword('orange')
const error = chalk.bold.red;
const success = chalk.keyword("green");

const program = require('commander')

var cheerio = require('cheerio');
var request = require('request')

const countries = require('./countries') 
const flags = require('./flags')

const list = require('../lib/list')

const url = 'https://www.worldometers.info/coronavirus/#countries';
const TIMER = 1000 * 60 * 15 // 15min

// const userCountryISO = process.argv[2] !== undefined
//   ? process.argv.slice(2)[0].toUpperCase()
//   : 'CN'

const getInfo = (param) => {
  const userCountryISO = param !== undefined
    ? param[0].toUpperCase()
    : 'CN'

  const country = countries.getCountryName(userCountryISO)
  const flag = flags.getEmoji(userCountryISO)

  return {
    flag,
    country
  }
}

const getStatus = (param) => {
  const { flag, country } = getInfo(param)
 

  const spinner = ora({
    text: danger(' ... Update on COVID-19 ...\n'),
    spinner: {
      interval: 300,
      frames: ['ðŸ¤¢','ðŸ¤®','ðŸ˜·']
    }
  }).start()
  
  try {
    request (url, (err, res, html) => {
      if(err) {
        console.log(error(err))
      } else {
        let items = []
        const $ = cheerio.load(html)
        const data = $('table#main_table_countries_today')

        data.find('tr').each(function (i, el) {
          const $cell = $(this).find('td');
          // console.log('population ', $cell.eq(14).text()) // 17,132,248
          items.push({
            country: $cell.eq(1).text(),
            total_cases:$cell.eq(2).text(),
            new_cases: $cell.eq(3).text(),
            total_deaths:$cell.eq(4).text(),
            new_deaths: $cell.eq(5).text(),
            total_recovered: $cell.eq(6).text(),
            active_cases: $cell.eq(7).text(),
            serious_critical: $cell.eq(9).text(),
            total_tests: $cell.eq(12).text(),
            population: $cell.eq(14).text(),
          })
      });

      // depricated, $($table) <!-- better way, this will always grab the table even if the "classname" changes like below
         // const data = $('#main_table_countries_today > tbody > tr').toArray()
        // data.map((row, i) => {
        //   const cell = row.childNodes.filter(node => node.name === 'td')       
        //   items.push({
        //     country: $(cell[0]).text(),
        //     total_cases: $(cell[1]).text(),
        //     new_cases: $(cell[2]).text(),
        //     total_deaths:$(cell[3]).text(),
        //     new_deaths: $(cell[4]).text(),
        //     total_recovered: $(cell[5]).text(),
        //     active_cases: $(cell[6]).text(),
        //     serious_critical: $(cell[7]).text()
        //   })
        // })

        // set "country" as key of the object

        // Netherlands:
        //  { 
        //    total_cases: '382',
        //    new_cases: '+61',
        //    total_deaths: '4',
        //    new_deaths: '',
        //    total_recovered: '',
        //    active_cases: '378',
        //    serious_critical: '1'
        //    },
        const countryAsKey = items.reduce((acc, {country, ...x}) => { acc[country] = x; return acc}, {})
        // replace 'spaces / quote ' from object values
        const formattedCountries = JSON.parse(JSON.stringify(countryAsKey).replace(/"\s+|\s+"/g,'"'))
        const date = new Date().toISOString().slice(0, 19).replace(/-/g, "/").replace("T", " ");

        console.log(success(`${flag}  ${country} - ${date}`))
        console.table(formattedCountries[country])
        console.log('/n===============================/n')

        spinner.stopAndPersist({
          symbol:'âœ…',
          text: chalk.bold.green(' - Done!\n')
        })
      }
    })
  } catch(err) {
    spinner.stop()
    console.log(error(error))
  }
}

program
  .command('list')
  .alias('ls')
  .description('List Supported Countries')
  .action(() => { 
    list()
    process.exit()
  })

program
.usage('[options] <country>')
.option('-c <countryCode>, --country <countryCode>', 'Corona Virus Update', 'CH')
.action((options, param) => {
  setInterval(() => getStatus(param), TIMER)
  getStatus(param)
})

program.parse(process.argv)